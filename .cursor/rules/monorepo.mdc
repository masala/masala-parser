---
description: 
globs: 
alwaysApply: true
---
This is a monorepo for Masala Parser, an open-source parser combinator library for JavaScript and TypeScript.

We are transitioning  from v1 cjs to v2 ESM

The main part is written in javascript, at /src. It is split in /src/lib with the main code, and /src/test with unit tests.
These unit-test are currently 100% coverage, and we MUST keep it that way.
They are currently done with node-unit and will move to vitest in the near future.

VERY important: When adding a local file import, always import typescript files using '.js' extension. If you touch a file that contains an typescript import without '.js', don't add it yourself, but put a warning.
Example:

```ts
import dotenv from 'dotenv'; // not local
import { parser } from '../custom/my-parser.js'; // local, add .js
```

The project exports a hand-made masala-parser.d.ts file, that is used to provide types for the library. It is not generated by typescript, but it MUST be kept up to date with the code.
However, you will NEVER update it without my approval. The reason is that the javascript code is very tricky,
using and abusing javascript power.


There is a /integration-ts directory we will work hard with. It has its own package.json file and imports masala-parser v2-alpha.
It proves that the parser works with typescript, and we will use it to test the parser with typescript files.
We will often copy the files from /dist to /integration-ts/node_modules/masala-parser, to make the code up to date without having to deploy on npm.



Components are made with react, typescript and tailwind.

The sites are in /pyramids/apps
So we have /pyramids/apps/dakar and /pyramids/apps/robusta. Then package.json goes into each directory

The shared components across all sites (buttons, column-layouts, cta..) are in /pyramids/packages

So we have /pyramids/packages/layouts and /pyramids/packages/ctas.  Then package.json goes into each directory.

/pyramids/packages/imagine is a package that is used to generate images with openai. It is a wrapper around the openai api.
NEVER execute a script by yourself in /imagine/script. It costs AI token, it's expensive

The structure of packages/ will probably change it the time: some package will be merged, other will appear.


